program         -> {decl} $

decl            -> vardecl
                 | fundecl
                 | stmt
                 
fundecl         -> FN ID '(' ( id_type ( {',' id_type} ) ) ')' ( '->' type ) block

vardecl         -> VAR id_type ( '=' bool );

-- always expect ';' after the derivation 
stmt            -> assign
                 | break
                 | continue
                 | return
                 | block
                 | if
                 | loop

break           -> BREAK ';'
continue        -> CONTINUE ';'

loop            -> LOOP(condition) stmt

if              -> IF '(' bool ')' stmt if_tail
if_tail         -> ELSE stmt
                 | &

assign          -> ID '=' bool ';'
                 | bool ';'

return          -> RETURN ( assign );

block           -> '{' {(vardecl | stmt)} '}'

bool            -> join bool_tail 
bool_tail       -> '||' join bool_tail 
                 | &

join            -> equality join_tail
join_tail       -> '&&' equality join_tail
                 | &

equality        -> rel equality_tail
equality_tail   -> '==' rel equality_tail
                 | '!=' rel equality_tail
                 | &

rel             -> expr rel_tail
rel_tail        -> '<' expr rel_tail
                 | '>' expr rel_tail
                 | '<=' expr rel_tail
                 | '>=' expr rel_tail
                 | &

expr            -> term expr_tail
expr_tail       -> '+' term expr_tail 
                 | '-' term expr_tail 
                 | &

term            -> unary term_tail 
term_tail       -> '*' unary term_tail 
                 | '/' unary term_tail 
                 | &

unary           -> ['!']['-']primary | call

call            -> primary ( '(' arguments? ')' )
arguments       -> assign ( "," assign )*

primary         -> '(' expr ')'
                | ID
                | TRUE | FALSE
                | [0-9]
                | STRING

id_type         -> ID (':' type)

type            -> NUM | BOOL | STRING