program         -> {decl} $

decl            -> vardecl
                 | fundecl
                 
fundecl         -> FN ID '(' ( ID ( {',' ID} ) ) ')' block

vardecl         -> VAR ID ( '=' bool );

stmt            -> assign
                 | BREAK ';'
                 | CONTINUE ';'
                 | return
                 | block
                 | if
                 | loop

loop            -> LOOP(condition) stmt

if              -> IF '(' bool ')' stmt if_tail
if_tail         -> ELSE stmt
                 | &

assign          -> (call '.' ) ID '=' bool ';'
                 | bool ';'

return          -> RETURN ( assign );

block           -> '{' {(vardecl | stmt)} '}'

bool            -> join bool_tail 
bool_tail       -> '||' join bool_tail 
                 | &

join            -> equality join_tail
join_tail       -> '&&' equality join_tail
                 | &

equality        -> rel equality_tail
equality_tail   -> '==' rel equality_tail
                 | '!=' rel equality_tail
                 | &

rel             -> expr rel_tail
rel_tail        -> '<' expr rel_tail
                 | '>' expr rel_tail
                 | '<=' expr rel_tail
                 | '>=' expr rel_tail
                 | &

expr            -> term expr_tail
expr_tail       -> '+' term expr_tail 
                 | '-' term expr_tail 
                 | &

term            -> unary term_tail 
term_tail       -> '*' unary term_tail 
                 | '/' unary term_tail 
                 | &

unary           -> ['!']['-']primary | call

call            -> primary ( '(' arguments? ')' | "." IDENTIFIER )* ';'
arguments       -> assign ( "," assign )* ;

primary          -> '(' expr ')'
                 | ID
                 | TRUE | FALSE
                 | [0-9]
                 | STRING